{"version":3,"sources":["../../src/evaluator/index.js"],"names":["TypedValue","constructor","type","value","objValue","castValue","types","isInteger","BN","isBN","hex","toString","isList","elementType","replace","map","ethers","utils","getAddress","Number","Evaluator","ast","bindings","availableHelpers","provider","providerHost","to","returnType","providers","JsonRpcProvider","DEFAULT_ETH_NODE","helpers","HelperManager","evaluateNodes","nodes","Promise","all","evaluateNode","bind","node","evaluatedNodes","body","evaluatedNode","castType","length","Math","ceil","panic","left","right","operator","add","sub","mul","pow","div","mod","leftValue","rightValue","bothTypesAddress","isAddress","bothTypesBytes","bytes","isType","bigNumberify","gt","gte","lt","lte","eq","predicate","leftFalsey","isZero","startsWith","test","target","inputs","outputs","call","abiCoder","encodeFunctionCall","name","callee","input","data","decodeParameter","helperName","exists","result","execute","evaluator","hasOwnProperty","binding","evaluate","flattenedEvaluatedNodes","Array","isArray","reduce","stringReturn","join","msg","Error","options"],"mappings":"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","sourcesContent":["/**\n * @module radspec/evaluator\n */\n\nimport BN from 'bn.js';\nimport flattenDeep from 'lodash.flattendeep';\nimport types from '../types';\nimport HelperManager from '../helpers/HelperManager';\nimport { DEFAULT_ETH_NODE, abiCoder } from '../defaults';\nimport { ethers } from 'ethers';\n\n/**\n * A value coupled with a type\n *\n * @class TypedValue\n * @param {string} type The type of the value\n * @param {*} value The value\n * @property {string} type\n * @property {*} value\n */\nclass TypedValue {\n  constructor(type, value, objValue = null) {\n    this.type = type;\n    this.value = value;\n    this.objValue = objValue;\n\n    this.castValue(type);\n  }\n\n  castValue(type) {\n    if (types.isInteger(type) && !BN.isBN(this.value)) {\n      this.value = new BN(this.value);\n\n      this.objValue = { hex: `0x${this.value.toString(16)}` };\n    }\n\n    if (types.isList(type)) {\n      const elementType = type.replace('[]', '');\n\n      this.value = this.value.map(value => {\n        return new TypedValue(elementType, value);\n      });\n    }\n\n    if (type === 'address') {\n      this.value = ethers.utils.getAddress(this.value);\n    }\n\n    if (type === 'string') {\n      this.value = `${this.value}`;\n    }\n\n    if (type === 'number') {\n      this.value = Number(this.value);\n    }\n  }\n\n  /**\n   * Get the string representation of the wrapped value\n   *\n   * @return {string}\n   */\n  toString() {\n    return this.value.toString();\n  }\n}\n\n/**\n * Walks an AST and evaluates each node.\n *\n * @class Evaluator\n * @param {radspec/parser/AST} ast The AST to evaluate\n * @param {radspec/Bindings} bindings An object of bindings and their values\n * @param {?Object} options An options object\n * @param {?Object} options.availablehelpers Available helpers\n * @param {?Web3} options.eth Web3 instance (used over options.ethNode)\n * @param {?string} options.ethNode The URL to an Ethereum node\n * @param {?string} options.to The destination address for this expression's transaction\n * @property {radspec/parser/AST} ast\n * @property {radspec/Bindings} bindings\n */\nexport class Evaluator {\n  constructor(\n      ast,\n      bindings,\n      {\n        availableHelpers = {},\n        provider,\n        providerHost,\n        to,\n        returnType = 'string',\n      } = {}\n  ) {\n    this.provider =\n      provider ||\n      new ethers.providers.JsonRpcProvider(providerHost || DEFAULT_ETH_NODE);\n\n    this.ast = ast;\n    this.bindings = bindings;\n    this.to = to && new TypedValue('address', to);\n    this.helpers = new HelperManager(availableHelpers);\n    this.returnType = returnType;\n  }\n\n  /**\n   * Evaluate an array of AST nodes.\n   *\n   * @param  {Array<radspec/parser/Node>} nodes\n   * @return {Promise<Array<string>>}\n   */\n  async evaluateNodes(nodes) {\n    return Promise.all(nodes.map(this.evaluateNode.bind(this)));\n  }\n\n  /**\n   * Evaluate a single node.\n   *\n   * @param  {radspec/parser/Node} node\n   * @return {Promise<TypedValue>}\n   */\n  async evaluateNode(node) {\n    if (node.type === 'ExpressionStatement') {\n      const evaluatedNodes = await this.evaluateNodes(node.body);\n\n      return evaluatedNodes;\n    }\n\n    if (node.type === 'GroupedExpression') {\n      const evaluatedNode = await this.evaluateNode(node.body);\n\n      if (node.castType) {\n        evaluatedNode.castValue(node.castType);\n      }\n\n      return evaluatedNode;\n    }\n\n    if (node.type === 'MonologueStatement') {\n      return new TypedValue('string', node.value);\n    }\n\n    if (node.type === 'StringLiteral') {\n      return new TypedValue('string', node.value || '');\n    }\n\n    if (node.type === 'NumberLiteral') {\n      return new TypedValue('int256', node.value);\n    }\n\n    if (node.type === 'BytesLiteral') {\n      const length = Math.ceil((node.value.length - 2) / 2);\n      if (length > 32) {\n        this.panic('Byte literal represents more than 32 bytes');\n      }\n\n      return new TypedValue(`bytes${length}`, node.value);\n    }\n\n    if (node.type === 'BoolLiteral') {\n      return new TypedValue('bool', node.value === 'true');\n    }\n\n    if (node.type === 'BinaryExpression') {\n      const left = await this.evaluateNode(node.left);\n      const right = await this.evaluateNode(node.right);\n\n      // String concatenation\n      if (\n        (left.type === 'string' || right.type === 'string') &&\n        node.operator === 'PLUS'\n      ) {\n        return new TypedValue(\n            'string',\n            left.value.toString() + right.value.toString()\n        );\n      }\n\n      // TODO Additionally check that the type is signed if subtracting\n      if (!types.isInteger(left.type) || !types.isInteger(right.type)) {\n        this.panic(\n            `Cannot evaluate binary expression \"${\n              node.operator\n            }\" for non-integer types \"${left.type}\" and \"${right.type}\"`\n        );\n      }\n\n      switch (node.operator) {\n        case 'PLUS':\n          return new TypedValue('int256', left.value.add(right.value));\n        case 'MINUS':\n          return new TypedValue('int256', left.value.sub(right.value));\n        case 'STAR':\n          return new TypedValue('int256', left.value.mul(right.value));\n        case 'POWER':\n          return new TypedValue('int256', left.value.pow(right.value));\n        case 'SLASH':\n          return new TypedValue('int256', left.value.div(right.value));\n        case 'MODULO':\n          return new TypedValue('int256', left.value.mod(right.value));\n        default:\n          this.panic(`Undefined binary operator \"${node.operator}\"`);\n      }\n    }\n\n    if (node.type === 'ComparisonExpression') {\n      const left = await this.evaluateNode(node.left);\n      const right = await this.evaluateNode(node.right);\n\n      let leftValue = left.value;\n      let rightValue = right.value;\n\n      const bothTypesAddress = (left, right) =>\n        // isAddress is true if type is address or bytes with size less than 20\n        types.isAddress(left.type) && types.isAddress(right.type);\n\n      const bothTypesBytes = (left, right) =>\n        types.types.bytes.isType(left.type) &&\n        types.types.bytes.isType(right.type);\n\n      // Conversion to BN for comparison will happen if:\n      // - Both types are addresses or bytes of any size (can be different sizes)\n      // - If one of the types is an address and the other bytes with size less than 20\n      if (bothTypesAddress(left, right) || bothTypesBytes(left, right)) {\n        leftValue = ethers.utils.bigNumberify(leftValue);\n        rightValue = ethers.utils.bigNumberify(rightValue);\n      } else if (!types.isInteger(left.type) || !types.isInteger(right.type)) {\n        this.panic(\n            `Cannot evaluate binary expression \"${\n              node.operator\n            }\" for non-integer or fixed-size bytes types \"${left.type}\" and \"${\n              right.type\n            }\"`\n        );\n      }\n\n      switch (node.operator) {\n        case 'GREATER':\n          return new TypedValue('bool', leftValue.gt(rightValue));\n        case 'GREATER_EQUAL':\n          return new TypedValue('bool', leftValue.gte(rightValue));\n        case 'LESS':\n          return new TypedValue('bool', leftValue.lt(rightValue));\n        case 'LESS_EQUAL':\n          return new TypedValue('bool', leftValue.lte(rightValue));\n        case 'EQUAL_EQUAL':\n          return new TypedValue('bool', leftValue.eq(rightValue));\n        case 'BANG_EQUAL':\n          return new TypedValue('bool', !leftValue.eq(rightValue));\n      }\n    }\n\n    if (node.type === 'TernaryExpression') {\n      if ((await this.evaluateNode(node.predicate)).value) {\n        return this.evaluateNode(node.left);\n      }\n\n      return this.evaluateNode(node.right);\n    }\n\n    if (node.type === 'DefaultExpression') {\n      const left = await this.evaluateNode(node.left);\n      let leftFalsey;\n\n      if (types.isInteger(left.type)) {\n        leftFalsey = left.value.isZero();\n      } else if (left.type === 'address' || left.type.startsWith('bytes')) {\n        leftFalsey = /^0x[0]*$/.test(left.value);\n      } else {\n        leftFalsey = !left.value;\n      }\n\n      return leftFalsey ? this.evaluateNode(node.right) : left;\n    }\n\n    if (node.type === 'CallExpression') {\n      // TODO Add a check for number of return values (can only be 1 for now)\n      let target;\n\n      // Inject self\n      if (node.target.type === 'Identifier' && node.target.value === 'self') {\n        target = this.to;\n      } else {\n        target = await this.evaluateNode(node.target);\n      }\n\n      if (target.type !== 'bytes20' && target.type !== 'address') {\n        this.panic('Target of call expression was not an address');\n      } else if (!ethers.utils.getAddress(target.value)) {\n        this.panic(`Checksum failed for address \"${target.value}\"`);\n      }\n\n      const inputs = await this.evaluateNodes(node.inputs);\n      const outputs = node.outputs;\n\n      const call = abiCoder.encodeFunctionCall(\n          {\n            name: node.callee,\n            type: 'function',\n            outputs,\n            inputs: inputs.map(({ type }) => ({\n              type,\n              name: type,\n            })),\n          },\n          inputs.map(input => input.value)\n      );\n\n      const returnType = outputs[0].type;\n\n      const data = await this.provider.call({\n        to: target.value,\n        data: call,\n      });\n\n      return new TypedValue(\n          returnType,\n          abiCoder.decodeParameter(returnType, data)\n      );\n    }\n\n    if (node.type === 'HelperFunction') {\n      const helperName = node.name;\n\n      if (!this.helpers.exists(helperName)) {\n        this.panic(`${helperName} helper function is not defined`);\n      }\n\n      const inputs = await this.evaluateNodes(node.inputs);\n\n      const result = await this.helpers.execute(helperName, inputs, {\n        provider: this.provider,\n        evaluator: this,\n      });\n\n      return new TypedValue(result.type, result.value, result.objValue);\n    }\n\n    if (node.type === 'Identifier') {\n      if (node.value === 'self') {\n        return this.to;\n      }\n\n      if (!this.bindings.hasOwnProperty(node.value)) {\n        this.panic(`Undefined binding \"${node.value}\"`);\n      }\n\n      const binding = this.bindings[node.value];\n      return new TypedValue(binding.type, binding.value);\n    }\n  }\n\n  /**\n   * Evaluate the entire AST.\n   *\n   * @return {*}\n   */\n  async evaluate() {\n    const evaluatedNodes = await this.evaluateNodes(this.ast.body);\n\n    const flattenedEvaluatedNodes = evaluatedNodes.map(evaluatedNode => {\n      if (Array.isArray(evaluatedNode)) {\n        return flattenDeep(evaluatedNode);\n      }\n\n      return evaluatedNode;\n    });\n\n    if (this.returnType === 'object') {\n      return flattenedEvaluatedNodes.map(evaluatedNode => {\n        if (Array.isArray(evaluatedNode)) {\n          if (evaluatedNode.length === 1) {\n            return {\n              type: evaluatedNode[0].type,\n              value: evaluatedNode[0].objValue || evaluatedNode[0].value,\n            };\n          }\n\n          return evaluatedNode.map(({ objValue, value, type }) => ({\n            type,\n            value: objValue || value,\n          }));\n        }\n\n        return {\n          type: evaluatedNode.type,\n          value: evaluatedNode.objValue || evaluatedNode.value,\n        };\n      });\n    }\n\n    return flattenedEvaluatedNodes.reduce((stringReturn, evaluatedNode) => {\n      if (Array.isArray(evaluatedNode)) {\n        return `${stringReturn}${evaluatedNode.join(' ')}`;\n      }\n\n      return `${stringReturn}${evaluatedNode}`;\n    }, '');\n  }\n\n  /**\n   * Report an error and abort evaluation.\n   *\n   * @param  {string} msg\n   */\n  panic(msg) {\n    throw new Error(`Error: ${msg}`);\n  }\n}\n\n/**\n * Evaluates an AST\n *\n * @memberof radspec/evaluator\n * @param {radspec/parser/AST} ast The AST to evaluate\n * @param {radspec/Bindings} bindings An object of bindings and their values\n * @param {?Object} options An options object\n * @param {?string} options.ethNode The URL to an Ethereum node\n * @param {?string} options.to The destination address for this expression's transaction\n * @return {string}\n */\nexport function evaluate(ast, bindings, options) {\n  return new Evaluator(ast, bindings, options).evaluate();\n}\n"],"file":"index.js"}